/*
 * Copyright 2016 Confluent Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.cimc.maxwell.sink;

import com.cimc.maxwell.sink.db.MysqlDbWriter;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.connect.sink.SinkRecord;
import org.apache.kafka.connect.sink.SinkTask;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.SQLException;
import java.util.Collection;
import java.util.Map;

public class MySqlSinkTask extends SinkTask {
    private static final Logger log = LoggerFactory.getLogger(MySqlSinkTask.class);

    MySqlSinkConfig config;
    MysqlDbWriter writer;

    @Override
    public void start(final Map<String, String> props) {
        log.info("Starting MySqlSinkTask");
        //将connector中的props传递到task中
        config = new MySqlSinkConfig(props);
        writer = new MysqlDbWriter(config);
        log.info("Start MySqlSinkTask Success");
    }

    @Override
    public void put(Collection<SinkRecord> records) {
        if (records.isEmpty()) {
            return;
        }
        final SinkRecord first = records.iterator().next();
        final int recordsCount = records.size();
        log.info("Received {} records. First record kafka coordinates:({}-{}-{}). Writing them to the database...",
                recordsCount, first.topic(), first.kafkaPartition(), first.kafkaOffset());
        //需要加重试机制，健壮性
        try {
            writer.batchWrite(records);
        } catch (SQLException e) {
            log.error(e.getMessage(), e);
        }
    }

    /**
     * 这个commit offset的东西还要考虑
     *
     * @param map
     */
    @Override
    public void flush(Map<TopicPartition, OffsetAndMetadata> map) {
        // Not necessary
    }

    public synchronized void stop() {
        log.info("Stopping task");
        writer.close();
    }


    public String version() {
        return "1.0.0";
    }

}
