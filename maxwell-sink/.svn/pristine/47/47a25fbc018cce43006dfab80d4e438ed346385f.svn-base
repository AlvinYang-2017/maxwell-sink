package com.cimc.maxwell.sink.db;

import com.alibaba.fastjson.JSON;
import com.cimc.maxwell.sink.row.RowMap;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by 00013708 on 2017/8/7.
 */
public class SqlAssembler {
    private static final Logger log = LoggerFactory.getLogger(SqlAssembler.class);

    private final Map<String, String> tablesPKMap;

    public SqlAssembler(String tablesPK) {
        this.tablesPKMap = initTablesPkMap(tablesPK);
    }

    /**
     * @param tablesPK example:tables.pk=db_ez.t_parcel:id,db_ez.t_box:box_id
     * @return example: {"db_ez.t_parcel" : "id","db_ez.t_box" : "box_id"}
     */
    private Map<String, String> initTablesPkMap(String tablesPK) {
        if (StringUtils.isEmpty(tablesPK)) {
            log.warn("tablesPK config null");
            return new HashMap<>();
        }
        final Map<String, String> map = new HashMap<>();
        String[] tablePKPairs = tablesPK.split(",");
        for (String pair : tablePKPairs) {
            String[] arr = pair.split(":");
            String dbTable = arr[0];
            String pk = arr[1];
            map.put(dbTable, pk);
        }
        log.info("initTablesPkMap success,values:{}", JSON.toJSONString(map));
        return map;
    }

    public String getPk(String database, String table) {
        return tablesPKMap.get(database + "." + table);
    }

    public String getSql(RowMap rowMap) {
        if (rowMap == null) {
            return null;
        }
        String database = rowMap.getDatabase();
        String table = rowMap.getTable();
        String type = rowMap.getType();
        Map<String, String> data = rowMap.getData();
        Map<String, String> old = rowMap.getOld();

        String dbTableWrapped = wrapDT(database, table);
        StringBuilder sqlSb = new StringBuilder();
        if (type.equalsIgnoreCase("INSERT")) {
            sqlSb.append("INSERT INTO ").append(dbTableWrapped);
            StringBuilder keySb = new StringBuilder("(");
            StringBuilder valSb = new StringBuilder("(");
            for (Map.Entry<String, String> entry : data.entrySet()) {
                String key = entry.getKey();
                String val = entry.getValue();
                keySb.append("`").append(key).append("`").append(",");
                if (val == null) {
                    valSb.append(val);
                } else {
                    valSb.append("'").append(val).append("'").append(",");
                }
            }
            keySb.deleteCharAt(keySb.lastIndexOf(","));
            valSb.deleteCharAt(valSb.lastIndexOf(","));
            keySb.append(")");
            valSb.append(")");

            sqlSb.append(" ").append(keySb).append(" VALUES ").append(valSb);

        } else if (type.equalsIgnoreCase("UPDATE")) {
            sqlSb.append("UPDATE ").append(dbTableWrapped);
            sqlSb.append(" SET ");
            for (Map.Entry<String, String> entry : old.entrySet()) {
                String key = entry.getKey();
                //得到新值
                String val = data.get(key);

                sqlSb.append(wrapKV(key, val)).append(",");
            }
            sqlSb.deleteCharAt(sqlSb.lastIndexOf(","));
            /**UPDATE 通过data得到where条件，必须先将old放入data**/
            data.putAll(old);
            sqlSb.append(" ").append(getWhereClause(database, table, data));

        } else if (type.equalsIgnoreCase("DELETE")) {
            /**DELETE maxwell生成的只有data有值**/
            sqlSb.append("DELETE FROM ").append(dbTableWrapped);
            sqlSb.append(" ").append(getWhereClause(database, table, data));
        }
        return sqlSb.toString();
    }

    private String getWhereClause(String database, String table, Map<String, String> data) {
        StringBuilder sb = new StringBuilder("WHERE 1 = 1");
        String pk = getPk(database, table);
        if (StringUtils.isNotEmpty(pk)) {
            sb.append(" AND ").append(wrapKV(pk, data.get(pk)));
        } else {
            for (Map.Entry<String, String> entry : data.entrySet()) {
                String key = entry.getKey();
                String val = entry.getValue();
                sb.append(" AND ").append(wrapKV(key, val));
            }
        }
        return sb.toString();
    }

    private String wrapKV(String key, String val) {
        if (StringUtils.isEmpty(key)) {
            return null;
        }
        //val可以为null，因为有些sql将字段的值更新为null
        StringBuilder sb = new StringBuilder();
        sb.append("`").append(key).append("`").append(" = ");
        if (val == null) {
            sb.append(val);
        } else {
            sb.append("'").append(val).append("'");
        }
        return sb.toString();
    }

    private String wrapDT(String database, String table) {
        if (StringUtils.isEmpty(database) || StringUtils.isEmpty(table)) {
            return null;
        }
        return new StringBuilder("`").append(database).append("`").append(".")
                .append("`").append(table).append("`").toString();
    }

    public static void main(String[] args) {
//      Integer i = 10;
        Map<String, Object> map = new HashMap<>();
        map.put("x", 10);
        map.put("y", null);
//        String iStr = (String) map.get("x");
        String YStr = (String) map.get("y");
        System.out.println(YStr);
    }

}
