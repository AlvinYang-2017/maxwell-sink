package com.cimc.maxwell.sink.metadata;

import com.cimc.maxwell.sink.vo.RowMap;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

/**
 * Created by 00013708 on 2017/8/7.
 */
public class DMLSQLAssembler {
    private static final Logger log = LoggerFactory.getLogger(DMLSQLAssembler.class);

    private static final String BLANK_SPACE = " ";

    private static final String BACK_QUOTE = "`";

    private static final String SINGLE_QUOTE  = "'";

    private final Map<String,Map<String,String>> tablesPkMap;

    public DMLSQLAssembler(Map<String,Map<String,String>> map){
       this.tablesPkMap = map;
    }

    public String getSql(RowMap rowMap) {
        if (rowMap == null) {
            return null;
        }
        String type = rowMap.getType();
        if (StringUtils.isEmpty(type)) {
            return null;
        }
        String sql = null;

        if (RowMapTypes.isDDL(type)) {
            sql = rowMap.getSql();
        } else if (RowMapTypes.isDML(type)) {
            sql = getDMLSql(rowMap);
        }
        return sql;
    }

    private String getDMLSql(RowMap rowMap) {
        if(rowMap==null){
            return null;
        }
        //        String database = maxwellVo.getDatabase();
        String database = "test";
        String table = rowMap.getTable();
        String type = rowMap.getType();

        Map<String, Object> data = rowMap.getData();
        Map<String, Object> old = rowMap.getOld();

        String dmlClause = getDMLClause(type, database, table);
        String clause = getClause(type, data, old);
        return dmlClause + BLANK_SPACE + clause;
    }

    private String getDMLClause(String type, String database, String table) {
        if (StringUtils.isEmpty(type) || StringUtils.isEmpty(database) || StringUtils.isEmpty(table)) {
            log.error("type:{},database:{},table:{}", type, database, table);
            return null;
        }
        StringBuilder sb = new StringBuilder();
        if (type.equalsIgnoreCase("insert")) {
            sb.append("insert into");
        } else if (type.equalsIgnoreCase("update")) {
            sb.append("update");
        } else if (type.equalsIgnoreCase("delete")) {
            sb.append("delete from");
        }
        sb.append(BLANK_SPACE).append(database).append(".").append(table);
        return sb.toString();
    }

    private String getClause(String type, Map<String, Object> data, Map<String, Object> old) {
        if (StringUtils.isEmpty(type)) {
            log.error("type is null");
            return null;
        }
        if (data == null || data.isEmpty()) {
            log.error("data is null or empty");
            return null;
        }

        StringBuilder sb = new StringBuilder();
        if (type.equalsIgnoreCase("insert")) {
            sb.append("set ");
            //直接从data中取出值进行拼装
            for (Map.Entry<String, Object> entry : data.entrySet()) {
                String column = entry.getKey();
                Object newVal = data.get(column);
                /**insert时，如果字段值是null，忽略**/
                if (newVal != null) {
                    //拼装字段
                    sb.append(column).append(" = ").append("'").append(newVal).append("'").append(",");
                }
            }
            sb.deleteCharAt(sb.lastIndexOf(","));
        } else if (type.equalsIgnoreCase("update")) {
            sb.append("set ");
            //从old中取出key，根据key从data中取出新值进行拼装
            for (Map.Entry<String, Object> entry : old.entrySet()) {
                String column = entry.getKey();
                /**update时，原来有值，后面设置为null，不能忽略**/
                Object newVal = data.get(column);
                if (newVal == null) {
                    //拼装字段
                    sb.append(column).append(" = ").append(newVal).append(",");
                } else {
                    //拼装字段
                    sb.append(column).append(" = ").append("'").append(newVal).append("'").append(",");
                }
            }
            sb.deleteCharAt(sb.lastIndexOf(","));
            //拼装where条件（先根据包裹的写死）
            sb.append(" where ").append("id = ").append(wrapSingleQuote((String)data.get("id")));
        } else if (type.equalsIgnoreCase("delete")) {
            sb.append(" where ").append("id = ").append(wrapSingleQuote((String)data.get("id")));
        }
        return sb.toString();
    }


    private String wrapBackQuote(String str){
        if(StringUtils.isEmpty(str)){
            return null;
        }else{
            return BACK_QUOTE+str+BACK_QUOTE;
        }
    }

    private String wrapSingleQuote(String str){
        if(StringUtils.isEmpty(str)){
            return null;
        }else{
            return SINGLE_QUOTE+str+SINGLE_QUOTE;
        }
    }


}
